{"ast":null,"code":"import React from'react';import ShapeWebGLDemo from'./ShapeWebGLDemo';// Renders a field of animated grass blades using ShapeWebGLDemo\nimport{jsx as _jsx}from\"react/jsx-runtime\";const GrassFieldWebGL=_ref=>{let{bladeCount=20,width='100vw',height='100vh'}=_ref;// Distribute blades horizontally, optionally with some randomization\nconst blades=Array.from({length:bladeCount},(_,i)=>{const frac=bladeCount===1?0.5:i/(bladeCount-1);// Spread from -0.8 to +0.8 in NDC (leaving some margin)\nconst baseX=-0.8+frac*1.6+(Math.random()-0.5)*0.05;const baseY=0;// Centered vertically\n// Make grass much smaller:\nconst scale=0.08+Math.random()*0.17;const phase=0*Math.random()*Math.PI*2;const speed=0.7+Math.random()*0.6;const swayAmount=0.7+Math.random()*0.6;return{baseX,baseY,scale,phase,speed,swayAmount};});// Render a single canvas, but pass all blades to the demo\nreturn/*#__PURE__*/_jsx(\"div\",{style:{width,height,position:'relative',overflow:'hidden'},children:/*#__PURE__*/_jsx(ShapeWebGLDemo,{bladeCount:bladeCount,blades:blades,height:height})});};export default GrassFieldWebGL;","map":{"version":3,"names":["React","ShapeWebGLDemo","jsx","_jsx","GrassFieldWebGL","_ref","bladeCount","width","height","blades","Array","from","length","_","i","frac","baseX","Math","random","baseY","scale","phase","PI","speed","swayAmount","style","position","overflow","children"],"sources":["/home/melvinvanelderen/TestGrass/client/src/components/GrassFieldWebGL.js"],"sourcesContent":["import React from 'react';\nimport ShapeWebGLDemo from './ShapeWebGLDemo';\n\n// Renders a field of animated grass blades using ShapeWebGLDemo\nconst GrassFieldWebGL = ({ bladeCount = 20, width = '100vw', height = '100vh' }) => {\n  // Distribute blades horizontally, optionally with some randomization\n  const blades = Array.from({ length: bladeCount }, (_, i) => {\n    const frac = bladeCount === 1 ? 0.5 : i / (bladeCount - 1);\n    // Spread from -0.8 to +0.8 in NDC (leaving some margin)\n    const baseX = -0.8 + frac * 1.6 + (Math.random() - 0.5) * 0.05;\n    const baseY = 0; // Centered vertically\n    // Make grass much smaller:\n    const scale = 0.08 + Math.random() * 0.17;\n    const phase = 0*Math.random() * Math.PI * 2;\n    const speed = 0.7 + Math.random() * 0.6;\n    const swayAmount = 0.7 + Math.random() * 0.6;\n    return { baseX, baseY, scale, phase, speed, swayAmount };\n  });\n\n  // Render a single canvas, but pass all blades to the demo\n  return (\n    <div style={{ width, height, position: 'relative', overflow: 'hidden' }}>\n      <ShapeWebGLDemo bladeCount={bladeCount} blades={blades} height={height} />\n    </div>\n  );\n};\n\nexport default GrassFieldWebGL;\n"],"mappings":"AAAA,MAAO,CAAAA,KAAK,KAAM,OAAO,CACzB,MAAO,CAAAC,cAAc,KAAM,kBAAkB,CAE7C;AAAA,OAAAC,GAAA,IAAAC,IAAA,yBACA,KAAM,CAAAC,eAAe,CAAGC,IAAA,EAA4D,IAA3D,CAAEC,UAAU,CAAG,EAAE,CAAEC,KAAK,CAAG,OAAO,CAAEC,MAAM,CAAG,OAAQ,CAAC,CAAAH,IAAA,CAC7E;AACA,KAAM,CAAAI,MAAM,CAAGC,KAAK,CAACC,IAAI,CAAC,CAAEC,MAAM,CAAEN,UAAW,CAAC,CAAE,CAACO,CAAC,CAAEC,CAAC,GAAK,CAC1D,KAAM,CAAAC,IAAI,CAAGT,UAAU,GAAK,CAAC,CAAG,GAAG,CAAGQ,CAAC,EAAIR,UAAU,CAAG,CAAC,CAAC,CAC1D;AACA,KAAM,CAAAU,KAAK,CAAG,CAAC,GAAG,CAAGD,IAAI,CAAG,GAAG,CAAG,CAACE,IAAI,CAACC,MAAM,CAAC,CAAC,CAAG,GAAG,EAAI,IAAI,CAC9D,KAAM,CAAAC,KAAK,CAAG,CAAC,CAAE;AACjB;AACA,KAAM,CAAAC,KAAK,CAAG,IAAI,CAAGH,IAAI,CAACC,MAAM,CAAC,CAAC,CAAG,IAAI,CACzC,KAAM,CAAAG,KAAK,CAAG,CAAC,CAACJ,IAAI,CAACC,MAAM,CAAC,CAAC,CAAGD,IAAI,CAACK,EAAE,CAAG,CAAC,CAC3C,KAAM,CAAAC,KAAK,CAAG,GAAG,CAAGN,IAAI,CAACC,MAAM,CAAC,CAAC,CAAG,GAAG,CACvC,KAAM,CAAAM,UAAU,CAAG,GAAG,CAAGP,IAAI,CAACC,MAAM,CAAC,CAAC,CAAG,GAAG,CAC5C,MAAO,CAAEF,KAAK,CAAEG,KAAK,CAAEC,KAAK,CAAEC,KAAK,CAAEE,KAAK,CAAEC,UAAW,CAAC,CAC1D,CAAC,CAAC,CAEF;AACA,mBACErB,IAAA,QAAKsB,KAAK,CAAE,CAAElB,KAAK,CAAEC,MAAM,CAAEkB,QAAQ,CAAE,UAAU,CAAEC,QAAQ,CAAE,QAAS,CAAE,CAAAC,QAAA,cACtEzB,IAAA,CAACF,cAAc,EAACK,UAAU,CAAEA,UAAW,CAACG,MAAM,CAAEA,MAAO,CAACD,MAAM,CAAEA,MAAO,CAAE,CAAC,CACvE,CAAC,CAEV,CAAC,CAED,cAAe,CAAAJ,eAAe","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}