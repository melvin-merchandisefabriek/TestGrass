{"ast":null,"code":"import React,{useRef,useEffect}from'react';import{jsx as _jsx}from\"react/jsx-runtime\";const MultiBezierWebGL=_ref=>{let{curves,height='100vh'}=_ref;const canvasRef=useRef(null);const animRef=useRef();const animatedCurvesRef=useRef(curves.map((c,i)=>c.map((_ref2,j)=>{let[x,y]=_ref2;return{baseX:x,baseY:y,angle:Math.random()*Math.PI*2+i+j,radius:0.15+Math.random()*0.1};})));useEffect(()=>{const canvas=canvasRef.current;canvas.width=window.innerWidth;canvas.height=window.innerHeight;const gl=canvas.getContext('webgl');if(!gl)return;// Shaders\nconst vs=gl.createShader(gl.VERTEX_SHADER);gl.shaderSource(vs,'attribute vec2 p; void main() { gl_Position = vec4(p, 0, 1); gl_PointSize = 1.0; }');gl.compileShader(vs);const fs=gl.createShader(gl.FRAGMENT_SHADER);gl.shaderSource(fs,`\n      precision mediump float;\n      void main() {\n        float dist = distance(gl_PointCoord, vec2(0.5, 0.5));\n        if (dist > 0.5) discard;\n        gl_FragColor = vec4(1.0, 1.0, 1.0, 1.0);\n      }\n    `);gl.compileShader(fs);const program=gl.createProgram();gl.attachShader(program,vs);gl.attachShader(program,fs);gl.linkProgram(program);gl.useProgram(program);const pos=gl.getAttribLocation(program,'p');gl.enableVertexAttribArray(pos);// --- Buffer setup ---\n// Preallocate large enough buffers for all curves\nconst N=100;// points per curve\nconst maxCurves=curves.length;const curveVertexCount=(N+1)*maxCurves;const curveVertexBuffer=gl.createBuffer();const curveVertexArray=new Float32Array(curveVertexCount*2);// For control points\nconst maxControlPoints=maxCurves*4;const controlPointBuffer=gl.createBuffer();const controlPointArray=new Float32Array(maxControlPoints*2);function draw(animatedCurves){gl.viewport(0,0,canvas.width,canvas.height);gl.clearColor(0.1,0.1,0.1,1);gl.clear(gl.COLOR_BUFFER_BIT);// Fill curveVertexArray and controlPointArray\nlet vtxOffset=0;let ctrlOffset=0;animatedCurves.forEach(controlPoints=>{// Compute curve points\nfunction cubicBezier(t,p0,p1,p2,p3){const mt=1-t;return[mt*mt*mt*p0[0]+3*mt*mt*t*p1[0]+3*mt*t*t*p2[0]+t*t*t*p3[0],mt*mt*mt*p0[1]+3*mt*mt*t*p1[1]+3*mt*t*t*p2[1]+t*t*t*p3[1]];}const pts=controlPoints.map(pt=>[pt.x,pt.y]);for(let i=0;i<=N;++i){const t=i/N;const pt=cubicBezier(t,...pts);curveVertexArray[vtxOffset++]=pt[0];curveVertexArray[vtxOffset++]=pt[1];}// Control points\nfor(let i=0;i<pts.length;++i){controlPointArray[ctrlOffset++]=pts[i][0];controlPointArray[ctrlOffset++]=pts[i][1];}});// Draw all curves in one call per curve\nlet curveBase=0;gl.bindBuffer(gl.ARRAY_BUFFER,curveVertexBuffer);gl.bufferData(gl.ARRAY_BUFFER,curveVertexArray,gl.DYNAMIC_DRAW);for(let i=0;i<maxCurves;++i){gl.vertexAttribPointer(pos,2,gl.FLOAT,false,0,0);gl.drawArrays(gl.LINE_STRIP,i*(N+1),N+1);}// Draw all control points in one call\ngl.bindBuffer(gl.ARRAY_BUFFER,controlPointBuffer);gl.bufferData(gl.ARRAY_BUFFER,controlPointArray,gl.DYNAMIC_DRAW);gl.vertexAttribPointer(pos,2,gl.FLOAT,false,0,0);gl.drawArrays(gl.POINTS,0,maxCurves*4);}// Animation loop\nfunction animate(){const now=performance.now()/1000;const animatedCurves=animatedCurvesRef.current.map(curve=>curve.map((pt,idx)=>{const speed=0.5+idx*0.2;const angle=pt.angle+now*speed;return{...pt,x:pt.baseX+Math.cos(angle)*pt.radius,y:pt.baseY+Math.sin(angle)*pt.radius};}));draw(animatedCurves);animRef.current=requestAnimationFrame(animate);}animate();// Cleanup\nreturn()=>{cancelAnimationFrame(animRef.current);};},[curves]);return/*#__PURE__*/_jsx(\"canvas\",{ref:canvasRef,style:{display:'block',width:'100%',height}});};export default MultiBezierWebGL;","map":{"version":3,"names":["React","useRef","useEffect","jsx","_jsx","MultiBezierWebGL","_ref","curves","height","canvasRef","animRef","animatedCurvesRef","map","c","i","_ref2","j","x","y","baseX","baseY","angle","Math","random","PI","radius","canvas","current","width","window","innerWidth","innerHeight","gl","getContext","vs","createShader","VERTEX_SHADER","shaderSource","compileShader","fs","FRAGMENT_SHADER","program","createProgram","attachShader","linkProgram","useProgram","pos","getAttribLocation","enableVertexAttribArray","N","maxCurves","length","curveVertexCount","curveVertexBuffer","createBuffer","curveVertexArray","Float32Array","maxControlPoints","controlPointBuffer","controlPointArray","draw","animatedCurves","viewport","clearColor","clear","COLOR_BUFFER_BIT","vtxOffset","ctrlOffset","forEach","controlPoints","cubicBezier","t","p0","p1","p2","p3","mt","pts","pt","curveBase","bindBuffer","ARRAY_BUFFER","bufferData","DYNAMIC_DRAW","vertexAttribPointer","FLOAT","drawArrays","LINE_STRIP","POINTS","animate","now","performance","curve","idx","speed","cos","sin","requestAnimationFrame","cancelAnimationFrame","ref","style","display"],"sources":["/home/melvinvanelderen/TestGrass/client/src/components/MultiBezierWebGL.js"],"sourcesContent":["import React, { useRef, useEffect } from 'react';\n\nconst MultiBezierWebGL = ({ curves, height = '100vh' }) => {\n  const canvasRef = useRef(null);\n  const animRef = useRef();\n  const animatedCurvesRef = useRef(\n    curves.map((c, i) =>\n      c.map(([x, y], j) => ({\n        baseX: x,\n        baseY: y,\n        angle: Math.random() * Math.PI * 2 + i + j,\n        radius: 0.15 + Math.random() * 0.1\n      }))\n    )\n  );\n\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    canvas.width = window.innerWidth;\n    canvas.height = window.innerHeight;\n    const gl = canvas.getContext('webgl');\n    if (!gl) return;\n\n    // Shaders\n    const vs = gl.createShader(gl.VERTEX_SHADER);\n    gl.shaderSource(vs, 'attribute vec2 p; void main() { gl_Position = vec4(p, 0, 1); gl_PointSize = 1.0; }');\n    gl.compileShader(vs);\n    const fs = gl.createShader(gl.FRAGMENT_SHADER);\n    gl.shaderSource(fs, `\n      precision mediump float;\n      void main() {\n        float dist = distance(gl_PointCoord, vec2(0.5, 0.5));\n        if (dist > 0.5) discard;\n        gl_FragColor = vec4(1.0, 1.0, 1.0, 1.0);\n      }\n    `);\n    gl.compileShader(fs);\n    const program = gl.createProgram();\n    gl.attachShader(program, vs);\n    gl.attachShader(program, fs);\n    gl.linkProgram(program);\n    gl.useProgram(program);\n    const pos = gl.getAttribLocation(program, 'p');\n    gl.enableVertexAttribArray(pos);\n\n    // --- Buffer setup ---\n    // Preallocate large enough buffers for all curves\n    const N = 100; // points per curve\n    const maxCurves = curves.length;\n    const curveVertexCount = (N + 1) * maxCurves;\n    const curveVertexBuffer = gl.createBuffer();\n    const curveVertexArray = new Float32Array(curveVertexCount * 2);\n\n    // For control points\n    const maxControlPoints = maxCurves * 4;\n    const controlPointBuffer = gl.createBuffer();\n    const controlPointArray = new Float32Array(maxControlPoints * 2);\n\n    function draw(animatedCurves) {\n      gl.viewport(0, 0, canvas.width, canvas.height);\n      gl.clearColor(0.1, 0.1, 0.1, 1);\n      gl.clear(gl.COLOR_BUFFER_BIT);\n\n      // Fill curveVertexArray and controlPointArray\n      let vtxOffset = 0;\n      let ctrlOffset = 0;\n      animatedCurves.forEach(controlPoints => {\n        // Compute curve points\n        function cubicBezier(t, p0, p1, p2, p3) {\n          const mt = 1 - t;\n          return [\n            mt*mt*mt*p0[0] + 3*mt*mt*t*p1[0] + 3*mt*t*t*p2[0] + t*t*t*p3[0],\n            mt*mt*mt*p0[1] + 3*mt*mt*t*p1[1] + 3*mt*t*t*p2[1] + t*t*t*p3[1]\n          ];\n        }\n        const pts = controlPoints.map(pt => [pt.x, pt.y]);\n        for (let i = 0; i <= N; ++i) {\n          const t = i / N;\n          const pt = cubicBezier(t, ...pts);\n          curveVertexArray[vtxOffset++] = pt[0];\n          curveVertexArray[vtxOffset++] = pt[1];\n        }\n        // Control points\n        for (let i = 0; i < pts.length; ++i) {\n          controlPointArray[ctrlOffset++] = pts[i][0];\n          controlPointArray[ctrlOffset++] = pts[i][1];\n        }\n      });\n\n      // Draw all curves in one call per curve\n      let curveBase = 0;\n      gl.bindBuffer(gl.ARRAY_BUFFER, curveVertexBuffer);\n      gl.bufferData(gl.ARRAY_BUFFER, curveVertexArray, gl.DYNAMIC_DRAW);\n      for (let i = 0; i < maxCurves; ++i) {\n        gl.vertexAttribPointer(pos, 2, gl.FLOAT, false, 0, 0);\n        gl.drawArrays(gl.LINE_STRIP, i * (N + 1), N + 1);\n      }\n      // Draw all control points in one call\n      gl.bindBuffer(gl.ARRAY_BUFFER, controlPointBuffer);\n      gl.bufferData(gl.ARRAY_BUFFER, controlPointArray, gl.DYNAMIC_DRAW);\n      gl.vertexAttribPointer(pos, 2, gl.FLOAT, false, 0, 0);\n      gl.drawArrays(gl.POINTS, 0, maxCurves * 4);\n    }\n\n    // Animation loop\n    function animate() {\n      const now = performance.now() / 1000;\n      const animatedCurves = animatedCurvesRef.current.map(curve =>\n        curve.map((pt, idx) => {\n          const speed = 0.5 + idx * 0.2;\n          const angle = pt.angle + now * speed;\n          return {\n            ...pt,\n            x: pt.baseX + Math.cos(angle) * pt.radius,\n            y: pt.baseY + Math.sin(angle) * pt.radius\n          };\n        })\n      );\n      draw(animatedCurves);\n      animRef.current = requestAnimationFrame(animate);\n    }\n    animate();\n\n    // Cleanup\n    return () => {\n      cancelAnimationFrame(animRef.current);\n    };\n  }, [curves]);\n\n  return <canvas ref={canvasRef} style={{ display: 'block', width: '100%', height }} />;\n};\n\nexport default MultiBezierWebGL;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}