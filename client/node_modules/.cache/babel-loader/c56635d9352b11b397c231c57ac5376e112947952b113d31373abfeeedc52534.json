{"ast":null,"code":"/**\n * Utility functions for handling shape display options\n *//**\n * Gets default display options for shapes\n * @returns {Object} Default display options\n */export const getDefaultDisplayOptions=()=>{return{showControlPoints:true,showAnchorPoints:true,showPositionAnchor:true,showBorder:true,showControlPointNames:false// Off by default as it can be visually noisy\n};};/**\n * Merges user-provided display options with defaults\n * @param {Object} options - User provided display options\n * @returns {Object} Merged display options\n */export const mergeDisplayOptions=options=>{const defaults=getDefaultDisplayOptions();// Handle null/undefined options or empty object\nif(!options||Object.keys(options).length===0){return defaults;}return{...defaults,...options};};/**\n * Creates display options with all settings set to the same value\n * @param {boolean} value - Value to set for all display options\n * @returns {Object} Display options with all settings set to value\n */export const createUniformDisplayOptions=function(){let value=arguments.length>0&&arguments[0]!==undefined?arguments[0]:true;return{showControlPoints:value,showAnchorPoints:value,showPositionAnchor:value,showBorder:value,showControlPointNames:value};};/**\n * Creates display options for \"editing mode\" - all points visible\n * @returns {Object} Display options for editing mode\n */export const getEditingModeOptions=()=>{return createUniformDisplayOptions(true);};/**\n * Creates display options for \"viewing mode\" - no points visible\n * @returns {Object} Display options for viewing mode\n */export const getViewingModeOptions=()=>{return createUniformDisplayOptions(false);};/**\n * Toggles a specific display option\n * @param {Object} currentOptions - Current display options\n * @param {string} optionKey - The option key to toggle\n * @returns {Object} Updated display options\n */export const toggleDisplayOption=(currentOptions,optionKey)=>{if(!currentOptions||!Object.prototype.hasOwnProperty.call(currentOptions,optionKey)){return currentOptions;}return{...currentOptions,[optionKey]:!currentOptions[optionKey]};};","map":{"version":3,"names":["getDefaultDisplayOptions","showControlPoints","showAnchorPoints","showPositionAnchor","showBorder","showControlPointNames","mergeDisplayOptions","options","defaults","Object","keys","length","createUniformDisplayOptions","value","arguments","undefined","getEditingModeOptions","getViewingModeOptions","toggleDisplayOption","currentOptions","optionKey","prototype","hasOwnProperty","call"],"sources":["/home/melvinvanelderen/TestGrass/client/src/utils/shape/displayUtils.js"],"sourcesContent":["/**\n * Utility functions for handling shape display options\n */\n\n/**\n * Gets default display options for shapes\n * @returns {Object} Default display options\n */\nexport const getDefaultDisplayOptions = () => {\n  return {\n    showControlPoints: true,\n    showAnchorPoints: true,\n    showPositionAnchor: true,\n    showBorder: true,\n    showControlPointNames: false // Off by default as it can be visually noisy\n  };\n};\n\n/**\n * Merges user-provided display options with defaults\n * @param {Object} options - User provided display options\n * @returns {Object} Merged display options\n */\nexport const mergeDisplayOptions = (options) => {\n  const defaults = getDefaultDisplayOptions();\n  \n  // Handle null/undefined options or empty object\n  if (!options || Object.keys(options).length === 0) {\n    return defaults;\n  }\n  \n  return { ...defaults, ...options };\n};\n\n/**\n * Creates display options with all settings set to the same value\n * @param {boolean} value - Value to set for all display options\n * @returns {Object} Display options with all settings set to value\n */\nexport const createUniformDisplayOptions = (value = true) => {\n  return {\n    showControlPoints: value,\n    showAnchorPoints: value,\n    showPositionAnchor: value,\n    showBorder: value,\n    showControlPointNames: value\n  };\n};\n\n/**\n * Creates display options for \"editing mode\" - all points visible\n * @returns {Object} Display options for editing mode\n */\nexport const getEditingModeOptions = () => {\n  return createUniformDisplayOptions(true);\n};\n\n/**\n * Creates display options for \"viewing mode\" - no points visible\n * @returns {Object} Display options for viewing mode\n */\nexport const getViewingModeOptions = () => {\n  return createUniformDisplayOptions(false);\n};\n\n/**\n * Toggles a specific display option\n * @param {Object} currentOptions - Current display options\n * @param {string} optionKey - The option key to toggle\n * @returns {Object} Updated display options\n */\nexport const toggleDisplayOption = (currentOptions, optionKey) => {\n  if (!currentOptions || !Object.prototype.hasOwnProperty.call(currentOptions, optionKey)) {\n    return currentOptions;\n  }\n  \n  return {\n    ...currentOptions,\n    [optionKey]: !currentOptions[optionKey]\n  };\n};\n"],"mappings":"AAAA;AACA;AACA,GAEA;AACA;AACA;AACA,GACA,MAAO,MAAM,CAAAA,wBAAwB,CAAGA,CAAA,GAAM,CAC5C,MAAO,CACLC,iBAAiB,CAAE,IAAI,CACvBC,gBAAgB,CAAE,IAAI,CACtBC,kBAAkB,CAAE,IAAI,CACxBC,UAAU,CAAE,IAAI,CAChBC,qBAAqB,CAAE,KAAM;AAC/B,CAAC,CACH,CAAC,CAED;AACA;AACA;AACA;AACA,GACA,MAAO,MAAM,CAAAC,mBAAmB,CAAIC,OAAO,EAAK,CAC9C,KAAM,CAAAC,QAAQ,CAAGR,wBAAwB,CAAC,CAAC,CAE3C;AACA,GAAI,CAACO,OAAO,EAAIE,MAAM,CAACC,IAAI,CAACH,OAAO,CAAC,CAACI,MAAM,GAAK,CAAC,CAAE,CACjD,MAAO,CAAAH,QAAQ,CACjB,CAEA,MAAO,CAAE,GAAGA,QAAQ,CAAE,GAAGD,OAAQ,CAAC,CACpC,CAAC,CAED;AACA;AACA;AACA;AACA,GACA,MAAO,MAAM,CAAAK,2BAA2B,CAAG,QAAAA,CAAA,CAAkB,IAAjB,CAAAC,KAAK,CAAAC,SAAA,CAAAH,MAAA,IAAAG,SAAA,MAAAC,SAAA,CAAAD,SAAA,IAAG,IAAI,CACtD,MAAO,CACLb,iBAAiB,CAAEY,KAAK,CACxBX,gBAAgB,CAAEW,KAAK,CACvBV,kBAAkB,CAAEU,KAAK,CACzBT,UAAU,CAAES,KAAK,CACjBR,qBAAqB,CAAEQ,KACzB,CAAC,CACH,CAAC,CAED;AACA;AACA;AACA,GACA,MAAO,MAAM,CAAAG,qBAAqB,CAAGA,CAAA,GAAM,CACzC,MAAO,CAAAJ,2BAA2B,CAAC,IAAI,CAAC,CAC1C,CAAC,CAED;AACA;AACA;AACA,GACA,MAAO,MAAM,CAAAK,qBAAqB,CAAGA,CAAA,GAAM,CACzC,MAAO,CAAAL,2BAA2B,CAAC,KAAK,CAAC,CAC3C,CAAC,CAED;AACA;AACA;AACA;AACA;AACA,GACA,MAAO,MAAM,CAAAM,mBAAmB,CAAGA,CAACC,cAAc,CAAEC,SAAS,GAAK,CAChE,GAAI,CAACD,cAAc,EAAI,CAACV,MAAM,CAACY,SAAS,CAACC,cAAc,CAACC,IAAI,CAACJ,cAAc,CAAEC,SAAS,CAAC,CAAE,CACvF,MAAO,CAAAD,cAAc,CACvB,CAEA,MAAO,CACL,GAAGA,cAAc,CACjB,CAACC,SAAS,EAAG,CAACD,cAAc,CAACC,SAAS,CACxC,CAAC,CACH,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}