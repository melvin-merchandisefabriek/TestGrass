{"ast":null,"code":"import React from'react';import Shape from'./Shape';import GrassBlade from'./GrassBlade';import{jsx as _jsx}from\"react/jsx-runtime\";const TriangleArray=()=>{// Generate 100 positions in a grid, each with a random top offset\nconst blades=Array.from({length:100},(_,i)=>({x:140+i%100*17.5+Math.random()*10,// 10 columns, 12px apart, random jitter\ny:110+Math.floor(i/10)*0,// 10 rows, 0px apart (all on same y, but you can adjust)\nphase:i/100*2*Math.PI,// unique phase for each blade\nrandomTopOffset:Math.random()*50-10// random offset between -10 and +10\n}));return/*#__PURE__*/_jsx(\"div\",{className:\"grass-component\"});};// Helper to generate a random greenish color\nexport function randomGrassColor(){const h=100+Math.random()*40;// green hue\nconst s=60+Math.random()*20;const l=35+Math.random()*20;return`hsl(${h},${s}%,${l}%)`;}// Export a function that returns an array of blade data for SVG rendering (with animation)\nexport function getGrassBladeData(count,width){let height=arguments.length>2&&arguments[2]!==undefined?arguments[2]:1080;let baseHeight=arguments.length>3&&arguments[3]!==undefined?arguments[3]:0;// Restore to the previous working version: use direct, larger base values (no scale factor)\nconst bladeBaseY=height-180-baseHeight;// 180 is the blade height\nreturn Array.from({length:count},(_,i)=>{console.log('unc - count:',count);let baseX;baseX=i/count*(width*0.5-100);// leave margin, 100px on each side\nlet x;x=baseX+(Math.random()-0.5)*10;// jitter\nconst y=0;const phase=i/count*2*Math.PI;const randomTopOffset=Math.random()*50-2;const controlPointAnimations={\"tri-top\":{formula:{x:{expression:`100+30*sin(PI*n*2-(PI/2)+${phase-1.2*Math.random()})`},y:{expression:`${bladeBaseY+50}+${randomTopOffset}`}}},\"tri-top-right-c1\":{formula:{x:{expression:`105+15*sin(PI*n*2-1+${phase+0.3*Math.random()})`},y:{expression:`${bladeBaseY+100}+${10}*sin(PI*n*4)+${randomTopOffset}`}}},\"tri-top-right-c2\":{formula:{x:{expression:`105+5*sin(PI*n*2-1+${phase+0.3*Math.random()})`},y:{expression:`${bladeBaseY+140}+${1}*sin(PI*n*4)+${randomTopOffset}`}}},\"tri-left-top-c1\":{formula:{x:{expression:`95+5*sin(PI*n*2-1+${phase+0.3*Math.random()})`},y:{expression:`${bladeBaseY+140}+${1}*sin(PI*n*4)+${randomTopOffset}`}}},\"tri-left-top-c2\":{formula:{x:{expression:`95+15*sin(PI*n*2-1+${phase+0.3*Math.random()})`},y:{expression:`${bladeBaseY+100}+${10}*sin(PI*n*4)+${randomTopOffset}`}}},\"tri-right\":{formula:{x:{expression:`110`},y:{expression:`${bladeBaseY+180}`}}},\"tri-left\":{formula:{x:{expression:`90`},y:{expression:`${bladeBaseY+180}`}}}};return{position:{x,y},controlPointAnimations,fill:`rgba(0, 105, 0, ${0.5+0.5*Math.random()})`};});}export default TriangleArray;","map":{"version":3,"names":["React","Shape","GrassBlade","jsx","_jsx","TriangleArray","blades","Array","from","length","_","i","x","Math","random","y","floor","phase","PI","randomTopOffset","className","randomGrassColor","h","s","l","getGrassBladeData","count","width","height","arguments","undefined","baseHeight","bladeBaseY","console","log","baseX","controlPointAnimations","formula","expression","position","fill"],"sources":["/home/melvinvanelderen/TestGrass/client/src/components/TriangleArray.js"],"sourcesContent":["import React from 'react';\nimport Shape from './Shape';\nimport GrassBlade from './GrassBlade';\n\nconst TriangleArray = () => {\n  // Generate 100 positions in a grid, each with a random top offset\n  const blades = Array.from({ length: 100 }, (_, i) => ({\n    x: 140 + (i % 100) * 17.5 + Math.random() * 10,   // 10 columns, 12px apart, random jitter\n    y: 110 + Math.floor(i / 10) * 0, // 10 rows, 0px apart (all on same y, but you can adjust)\n    phase: (i / 100) * 2 * Math.PI, // unique phase for each blade\n    randomTopOffset: Math.random() * 50 - 10 // random offset between -10 and +10\n  }));\n\n  return (\n    <div className=\"grass-component\">\n      {/* {blades.map((pos, idx) => {\n        // Create a unique controlPointAnimations for each blade with a phase offset and top y offset\n        const controlPointAnimations = {\n          \"tri-top\": {\n            formula: {\n              x: { expression: `100+30*sin(PI*n*2-(PI/2)+${pos.phase-1.2*Math.random()})` },\n              y: { expression: `50+${pos.randomTopOffset}` }\n            }\n          },\n          \"tri-top-right-c1\": {\n            formula: {\n              x: { expression: `105+15*sin(PI*n*2-1+${pos.phase+0.3*Math.random()})` },\n              y: { expression: `100+10*sin(PI*n*4)+${pos.randomTopOffset}` }\n            }\n          },\n          \"tri-top-right-c2\": {\n            formula: {\n              x: { expression: `105+5*sin(PI*n*2-1+${pos.phase+0.3*Math.random()})` },\n              y: { expression: `140+1*sin(PI*n*4)+${pos.randomTopOffset}` }\n            }\n          },\n          \"tri-left-top-c1\": {\n            formula: {\n              x: { expression: `95+5*sin(PI*n*2-1+${pos.phase+0.3*Math.random()})` },\n              y: { expression: `140+1*sin(PI*n*4)+${pos.randomTopOffset}` }\n            }\n          },\n          \"tri-left-top-c2\": {\n            formula: {\n              x: { expression: `95+15*sin(PI*n*2-1+${pos.phase+0.3*Math.random()})` },\n              y: { expression: `100+10*sin(PI*n*4)+${pos.randomTopOffset}` }\n            }\n          },\n          \"tri-right\": {\n            formula: {\n              x: { expression: `110` },\n              y: { expression: `180`}\n            }\n          },\n          \"tri-left\": {\n            formula: {\n              x: { expression: `90` },\n              y: { expression: `180`}\n            }\n          }\n        };\n        return (\n          // const bleh = rgba(0, 105, 0, 0.84)\n          <GrassBlade\n            key={idx}\n            position={{ x: pos.x, y: pos.y }}\n            controlPointAnimations={controlPointAnimations}\n            fill={`rgba(0, 105, 0, ${0.5 + 0.5 * Math.random()})`} // random opacity\n          />\n        );\n      })} */}\n    </div>\n  );\n};\n\n// Helper to generate a random greenish color\nexport function randomGrassColor() {\n  const h = 100 + Math.random() * 40; // green hue\n  const s = 60 + Math.random() * 20;\n  const l = 35 + Math.random() * 20;\n  return `hsl(${h},${s}%,${l}%)`;\n}\n\n// Export a function that returns an array of blade data for SVG rendering (with animation)\nexport function getGrassBladeData(count, width, height = 1080, baseHeight = 0) {\n  // Restore to the previous working version: use direct, larger base values (no scale factor)\n  const bladeBaseY = height - 180 - baseHeight; // 180 is the blade height\n  return Array.from({ length: count }, (_, i) => {\n    console.log('unc - count:', count);\n    let baseX;\n      baseX = (i / (count)) * (width*0.5-100); // leave margin, 100px on each side\n    let x;\n    x = baseX + ((Math.random()-0.5) * 10); // jitter\n    const y = 0;\n    const phase = (i / count) * 2 * Math.PI;\n    const randomTopOffset = Math.random() * 50 - 2;\n    const controlPointAnimations = {\n      \"tri-top\": {\n        formula: {\n          x: { expression: `100+30*sin(PI*n*2-(PI/2)+${phase-1.2*Math.random()})` },\n          y: { expression: `${bladeBaseY + 50}+${randomTopOffset}` }\n        }\n      },\n      \"tri-top-right-c1\": {\n        formula: {\n          x: { expression: `105+15*sin(PI*n*2-1+${phase+0.3*Math.random()})` },\n          y: { expression: `${bladeBaseY + 100}+${10}*sin(PI*n*4)+${randomTopOffset}` }\n        }\n      },\n      \"tri-top-right-c2\": {\n        formula: {\n          x: { expression: `105+5*sin(PI*n*2-1+${phase+0.3*Math.random()})` },\n          y: { expression: `${bladeBaseY + 140}+${1}*sin(PI*n*4)+${randomTopOffset}` }\n        }\n      },\n      \"tri-left-top-c1\": {\n        formula: {\n          x: { expression: `95+5*sin(PI*n*2-1+${phase+0.3*Math.random()})` },\n          y: { expression: `${bladeBaseY + 140}+${1}*sin(PI*n*4)+${randomTopOffset}` }\n        }\n      },\n      \"tri-left-top-c2\": {\n        formula: {\n          x: { expression: `95+15*sin(PI*n*2-1+${phase+0.3*Math.random()})` },\n          y: { expression: `${bladeBaseY + 100}+${10}*sin(PI*n*4)+${randomTopOffset}` }\n        }\n      },\n      \"tri-right\": {\n        formula: {\n          x: { expression: `110` },\n          y: { expression: `${bladeBaseY + 180}`}\n        }\n      },\n      \"tri-left\": {\n        formula: {\n          x: { expression: `90` },\n          y: { expression: `${bladeBaseY + 180}`}\n        }\n      }\n    };\n    return {\n      position: { x, y },\n      controlPointAnimations,\n      fill: `rgba(0, 105, 0, ${0.5 + 0.5 * Math.random()})`\n    };\n  });\n}\n\nexport default TriangleArray;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}