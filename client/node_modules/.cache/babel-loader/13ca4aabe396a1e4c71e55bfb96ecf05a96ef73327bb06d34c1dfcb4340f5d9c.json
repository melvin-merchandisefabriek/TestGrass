{"ast":null,"code":"// Unified variable substitution and deep clone utilities\n/**\n * Substitute |var:varName| in a string using a variable lookup object.\n * Handles nested and repeated substitutions.\n * @param {string} expression - The string to process\n * @param {Object} variables - Lookup object for variable values\n * @param {number} [maxIterations=10] - Prevent infinite loops\n * @returns {string}\n */export function substituteVariables(expression,variables){let maxIterations=arguments.length>2&&arguments[2]!==undefined?arguments[2]:10;if(!expression||typeof expression!=='string'||!expression.includes('|var:'))return expression;let processed=expression;let changed=true;let iterations=0;const varNames=Object.keys(variables).sort((a,b)=>b.length-a.length);while(changed&&iterations<maxIterations){changed=false;iterations++;for(const name of varNames){const pattern=`|var:${name}|`;if(processed.includes(pattern)){const value=variables[name];if(value!==undefined){const old=processed;processed=processed.split(pattern).join(value);if(old!==processed)changed=true;}}}}return processed;}/**\n * Deep clone an object using JSON methods.\n * @param {any} obj\n * @returns {any}\n */export function deepClone(obj){return JSON.parse(JSON.stringify(obj));}","map":{"version":3,"names":["substituteVariables","expression","variables","maxIterations","arguments","length","undefined","includes","processed","changed","iterations","varNames","Object","keys","sort","a","b","name","pattern","value","old","split","join","deepClone","obj","JSON","parse","stringify"],"sources":["/home/melvinvanelderen/TestGrass/client/src/utils/shape/variableUtils.js"],"sourcesContent":["// Unified variable substitution and deep clone utilities\n\n/**\n * Substitute |var:varName| in a string using a variable lookup object.\n * Handles nested and repeated substitutions.\n * @param {string} expression - The string to process\n * @param {Object} variables - Lookup object for variable values\n * @param {number} [maxIterations=10] - Prevent infinite loops\n * @returns {string}\n */\nexport function substituteVariables(expression, variables, maxIterations = 10) {\n  if (!expression || typeof expression !== 'string' || !expression.includes('|var:')) return expression;\n  let processed = expression;\n  let changed = true;\n  let iterations = 0;\n  const varNames = Object.keys(variables).sort((a, b) => b.length - a.length);\n  while (changed && iterations < maxIterations) {\n    changed = false;\n    iterations++;\n    for (const name of varNames) {\n      const pattern = `|var:${name}|`;\n      if (processed.includes(pattern)) {\n        const value = variables[name];\n        if (value !== undefined) {\n          const old = processed;\n          processed = processed.split(pattern).join(value);\n          if (old !== processed) changed = true;\n        }\n      }\n    }\n  }\n  return processed;\n}\n\n/**\n * Deep clone an object using JSON methods.\n * @param {any} obj\n * @returns {any}\n */\nexport function deepClone(obj) {\n  return JSON.parse(JSON.stringify(obj));\n}\n"],"mappings":"AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GACA,MAAO,SAAS,CAAAA,mBAAmBA,CAACC,UAAU,CAAEC,SAAS,CAAsB,IAApB,CAAAC,aAAa,CAAAC,SAAA,CAAAC,MAAA,IAAAD,SAAA,MAAAE,SAAA,CAAAF,SAAA,IAAG,EAAE,CAC3E,GAAI,CAACH,UAAU,EAAI,MAAO,CAAAA,UAAU,GAAK,QAAQ,EAAI,CAACA,UAAU,CAACM,QAAQ,CAAC,OAAO,CAAC,CAAE,MAAO,CAAAN,UAAU,CACrG,GAAI,CAAAO,SAAS,CAAGP,UAAU,CAC1B,GAAI,CAAAQ,OAAO,CAAG,IAAI,CAClB,GAAI,CAAAC,UAAU,CAAG,CAAC,CAClB,KAAM,CAAAC,QAAQ,CAAGC,MAAM,CAACC,IAAI,CAACX,SAAS,CAAC,CAACY,IAAI,CAAC,CAACC,CAAC,CAAEC,CAAC,GAAKA,CAAC,CAACX,MAAM,CAAGU,CAAC,CAACV,MAAM,CAAC,CAC3E,MAAOI,OAAO,EAAIC,UAAU,CAAGP,aAAa,CAAE,CAC5CM,OAAO,CAAG,KAAK,CACfC,UAAU,EAAE,CACZ,IAAK,KAAM,CAAAO,IAAI,GAAI,CAAAN,QAAQ,CAAE,CAC3B,KAAM,CAAAO,OAAO,CAAG,QAAQD,IAAI,GAAG,CAC/B,GAAIT,SAAS,CAACD,QAAQ,CAACW,OAAO,CAAC,CAAE,CAC/B,KAAM,CAAAC,KAAK,CAAGjB,SAAS,CAACe,IAAI,CAAC,CAC7B,GAAIE,KAAK,GAAKb,SAAS,CAAE,CACvB,KAAM,CAAAc,GAAG,CAAGZ,SAAS,CACrBA,SAAS,CAAGA,SAAS,CAACa,KAAK,CAACH,OAAO,CAAC,CAACI,IAAI,CAACH,KAAK,CAAC,CAChD,GAAIC,GAAG,GAAKZ,SAAS,CAAEC,OAAO,CAAG,IAAI,CACvC,CACF,CACF,CACF,CACA,MAAO,CAAAD,SAAS,CAClB,CAEA;AACA;AACA;AACA;AACA,GACA,MAAO,SAAS,CAAAe,SAASA,CAACC,GAAG,CAAE,CAC7B,MAAO,CAAAC,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,SAAS,CAACH,GAAG,CAAC,CAAC,CACxC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}