{"ast":null,"code":"import React,{useRef,useEffect}from'react';// --- Simple homemade math expression parser ---\nimport{jsx as _jsx}from\"react/jsx-runtime\";function evalExpr(expr,vars){// Only allow a safe subset of Math and variables\nconst safeMath={sin:Math.sin,cos:Math.cos,tan:Math.tan,abs:Math.abs,min:Math.min,max:Math.max,pow:Math.pow,PI:Math.PI,E:Math.E};// Build a function with the allowed variables\nconst keys=Object.keys(vars).concat(Object.keys(safeMath));const values=Object.values(vars).concat(Object.values(safeMath));// eslint-disable-next-line no-new-func\nreturn Function(...keys,`return (${expr});`)(...values);}// --- Blade shape/animation config ---\nconst bladeConfig={controlPoints:[{x:'baseX - width/2',y:'baseY'},// base left\n{x:'baseX',y:'baseY - height + sway'},// tip\n{x:'baseX + width/2',y:'baseY'}// base right\n],animation:{sway:'sin(t * speed + phase) * swayAmount'}};// --- Main WebGL grass demo ---\nconst GrassBladeWebGLDemo=_ref=>{let{bladeCount=100,height='100vh'}=_ref;const canvasRef=useRef(null);const animRef=useRef();// Per-blade parameters\nconst blades=Array.from({length:bladeCount},(_,i)=>({baseX:i/bladeCount*2-1,// NDC X in [-1,1]\nbaseY:-0.8+Math.random()*0.1,// NDC Y\nwidth:0.01+Math.random()*0.01,height:0.15+Math.random()*0.05,phase:Math.random()*Math.PI*2,speed:1+Math.random()*0.5,swayAmount:0.05+Math.random()*0.03}));useEffect(()=>{const canvas=canvasRef.current;canvas.width=window.innerWidth;canvas.height=window.innerHeight;const gl=canvas.getContext('webgl');if(!gl)return;// Shaders\nconst vs=gl.createShader(gl.VERTEX_SHADER);gl.shaderSource(vs,'attribute vec2 p; void main() { gl_Position = vec4(p, 0, 1); }');gl.compileShader(vs);const fs=gl.createShader(gl.FRAGMENT_SHADER);gl.shaderSource(fs,'precision mediump float; void main() { gl_FragColor = vec4(0.1, 0.7, 0.2, 1.0); }');gl.compileShader(fs);const program=gl.createProgram();gl.attachShader(program,vs);gl.attachShader(program,fs);gl.linkProgram(program);gl.useProgram(program);const pos=gl.getAttribLocation(program,'p');gl.enableVertexAttribArray(pos);// Buffers\nconst maxVerts=bladeCount*3;const vertArray=new Float32Array(maxVerts*2);const vertBuf=gl.createBuffer();// Reusable objects to avoid per-frame allocations\nconst animVars={};const animResults={};function draw(t){let vtx=0;for(let i=0;i<bladeCount;++i){const params=blades[i];// Copy params into animVars\nObject.assign(animVars,params);animVars.t=t;// Compute animation results and store in animResults\nfor(const[k,expr]of Object.entries(bladeConfig.animation)){animResults[k]=evalExpr(expr,animVars);}// Merge animResults into animVars\nObject.assign(animVars,animResults);// Compute control points\nbladeConfig.controlPoints.forEach(pt=>{vertArray[vtx++]=evalExpr(pt.x,animVars);vertArray[vtx++]=evalExpr(pt.y,animVars);});}// Upload and draw\ngl.bindBuffer(gl.ARRAY_BUFFER,vertBuf);gl.bufferData(gl.ARRAY_BUFFER,vertArray,gl.DYNAMIC_DRAW);gl.vertexAttribPointer(pos,2,gl.FLOAT,false,0,0);gl.clearColor(0.1,0.1,0.1,1);gl.clear(gl.COLOR_BUFFER_BIT);gl.drawArrays(gl.TRIANGLES,0,bladeCount*3);}function animate(){const t=performance.now()/1000;draw(t);animRef.current=requestAnimationFrame(animate);}animate();return()=>cancelAnimationFrame(animRef.current);},[bladeCount]);return/*#__PURE__*/_jsx(\"canvas\",{ref:canvasRef,style:{display:'block',width:'100%',height}});};export default GrassBladeWebGLDemo;","map":{"version":3,"names":["React","useRef","useEffect","jsx","_jsx","evalExpr","expr","vars","safeMath","sin","Math","cos","tan","abs","min","max","pow","PI","E","keys","Object","concat","values","Function","bladeConfig","controlPoints","x","y","animation","sway","GrassBladeWebGLDemo","_ref","bladeCount","height","canvasRef","animRef","blades","Array","from","length","_","i","baseX","baseY","random","width","phase","speed","swayAmount","canvas","current","window","innerWidth","innerHeight","gl","getContext","vs","createShader","VERTEX_SHADER","shaderSource","compileShader","fs","FRAGMENT_SHADER","program","createProgram","attachShader","linkProgram","useProgram","pos","getAttribLocation","enableVertexAttribArray","maxVerts","vertArray","Float32Array","vertBuf","createBuffer","animVars","animResults","draw","t","vtx","params","assign","k","entries","forEach","pt","bindBuffer","ARRAY_BUFFER","bufferData","DYNAMIC_DRAW","vertexAttribPointer","FLOAT","clearColor","clear","COLOR_BUFFER_BIT","drawArrays","TRIANGLES","animate","performance","now","requestAnimationFrame","cancelAnimationFrame","ref","style","display"],"sources":["/home/melvinvanelderen/TestGrass/client/src/components/GrassBladeWebGLDemo.js"],"sourcesContent":["import React, { useRef, useEffect } from 'react';\n\n// --- Simple homemade math expression parser ---\nfunction evalExpr(expr, vars) {\n  // Only allow a safe subset of Math and variables\n  const safeMath = {\n    sin: Math.sin,\n    cos: Math.cos,\n    tan: Math.tan,\n    abs: Math.abs,\n    min: Math.min,\n    max: Math.max,\n    pow: Math.pow,\n    PI: Math.PI,\n    E: Math.E\n  };\n  // Build a function with the allowed variables\n  const keys = Object.keys(vars).concat(Object.keys(safeMath));\n  const values = Object.values(vars).concat(Object.values(safeMath));\n  // eslint-disable-next-line no-new-func\n  return Function(...keys, `return (${expr});`)(...values);\n}\n\n// --- Blade shape/animation config ---\nconst bladeConfig = {\n  controlPoints: [\n    { x: 'baseX - width/2', y: 'baseY' }, // base left\n    { x: 'baseX', y: 'baseY - height + sway' }, // tip\n    { x: 'baseX + width/2', y: 'baseY' } // base right\n  ],\n  animation: {\n    sway: 'sin(t * speed + phase) * swayAmount'\n  }\n};\n\n// --- Main WebGL grass demo ---\nconst GrassBladeWebGLDemo = ({ bladeCount = 100, height = '100vh' }) => {\n  const canvasRef = useRef(null);\n  const animRef = useRef();\n  // Per-blade parameters\n  const blades = Array.from({ length: bladeCount }, (_, i) => ({\n    baseX: (i / bladeCount) * 2 - 1, // NDC X in [-1,1]\n    baseY: -0.8 + Math.random() * 0.1, // NDC Y\n    width: 0.01 + Math.random() * 0.01,\n    height: 0.15 + Math.random() * 0.05,\n    phase: Math.random() * Math.PI * 2,\n    speed: 1 + Math.random() * 0.5,\n    swayAmount: 0.05 + Math.random() * 0.03\n  }));\n\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    canvas.width = window.innerWidth;\n    canvas.height = window.innerHeight;\n    const gl = canvas.getContext('webgl');\n    if (!gl) return;\n    // Shaders\n    const vs = gl.createShader(gl.VERTEX_SHADER);\n    gl.shaderSource(vs, 'attribute vec2 p; void main() { gl_Position = vec4(p, 0, 1); }');\n    gl.compileShader(vs);\n    const fs = gl.createShader(gl.FRAGMENT_SHADER);\n    gl.shaderSource(fs, 'precision mediump float; void main() { gl_FragColor = vec4(0.1, 0.7, 0.2, 1.0); }');\n    gl.compileShader(fs);\n    const program = gl.createProgram();\n    gl.attachShader(program, vs);\n    gl.attachShader(program, fs);\n    gl.linkProgram(program);\n    gl.useProgram(program);\n    const pos = gl.getAttribLocation(program, 'p');\n    gl.enableVertexAttribArray(pos);\n    // Buffers\n    const maxVerts = bladeCount * 3;\n    const vertArray = new Float32Array(maxVerts * 2);\n    const vertBuf = gl.createBuffer();\n    // Reusable objects to avoid per-frame allocations\n    const animVars = {};\n    const animResults = {};\n\n    function draw(t) {\n      let vtx = 0;\n      for (let i = 0; i < bladeCount; ++i) {\n        const params = blades[i];\n        // Copy params into animVars\n        Object.assign(animVars, params);\n        animVars.t = t;\n        // Compute animation results and store in animResults\n        for (const [k, expr] of Object.entries(bladeConfig.animation)) {\n          animResults[k] = evalExpr(expr, animVars);\n        }\n        // Merge animResults into animVars\n        Object.assign(animVars, animResults);\n        // Compute control points\n        bladeConfig.controlPoints.forEach(pt => {\n          vertArray[vtx++] = evalExpr(pt.x, animVars);\n          vertArray[vtx++] = evalExpr(pt.y, animVars);\n        });\n      }\n      // Upload and draw\n      gl.bindBuffer(gl.ARRAY_BUFFER, vertBuf);\n      gl.bufferData(gl.ARRAY_BUFFER, vertArray, gl.DYNAMIC_DRAW);\n      gl.vertexAttribPointer(pos, 2, gl.FLOAT, false, 0, 0);\n      gl.clearColor(0.1, 0.1, 0.1, 1);\n      gl.clear(gl.COLOR_BUFFER_BIT);\n      gl.drawArrays(gl.TRIANGLES, 0, bladeCount * 3);\n    }\n\n    function animate() {\n      const t = performance.now() / 1000;\n      draw(t);\n      animRef.current = requestAnimationFrame(animate);\n    }\n    animate();\n    return () => cancelAnimationFrame(animRef.current);\n  }, [bladeCount]);\n\n  return <canvas ref={canvasRef} style={{ display: 'block', width: '100%', height }} />;\n};\n\nexport default GrassBladeWebGLDemo;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}