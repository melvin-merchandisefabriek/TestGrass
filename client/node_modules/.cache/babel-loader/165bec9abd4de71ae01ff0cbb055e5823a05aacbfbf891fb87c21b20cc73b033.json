{"ast":null,"code":"import React,{useRef,useEffect}from'react';import bladeConfig from'../bladeConfig.json';// Quadratic Bezier helper\nimport{jsx as _jsx}from\"react/jsx-runtime\";function quadBezier(t,p0,p1,p2){const mt=1-t;return[mt*mt*p0[0]+2*mt*t*p1[0]+t*t*p2[0],mt*mt*p0[1]+2*mt*t*p1[1]+t*t*p2[1]];}// Helper to generate the vertex shader source with injected sway formula\nfunction getVertexShaderSource(swayFormula){return`\nattribute vec2 position;\nattribute float bladeIndex;\nattribute float bladeHeight;\nattribute vec3 bladeColor;\nuniform float time;\nuniform float bladeCount;\nuniform float spread;\nuniform float spreadOffset;\nuniform float phaseStep;\nuniform float swaySpeed;\nuniform float swayAmount;\nvarying vec3 vColor;\nvoid main() {\n    float xOffset = (bladeIndex / (bladeCount - 1.0)) * spread + spreadOffset;\n    float phase = bladeIndex * phaseStep;\n    float sway = ${swayFormula};\n    float y = position.y * bladeHeight;\n    gl_Position = vec4(position.x + xOffset + sway, y, 0.0, 1.0);\n    vColor = bladeColor;\n}\n`;}const fragmentShaderSource=`\nprecision mediump float;\nvarying vec3 vColor;\nvoid main() {\n    gl_FragColor = vec4(vColor, 1.0);\n}\n`;function createShader(gl,type,source){const shader=gl.createShader(type);gl.shaderSource(shader,source);gl.compileShader(shader);if(!gl.getShaderParameter(shader,gl.COMPILE_STATUS)){throw new Error(gl.getShaderInfoLog(shader));}return shader;}const BladeGPUAnimated=_ref=>{let{bladeCount=5}=_ref;const canvasRef=useRef();useEffect(()=>{const canvas=canvasRef.current;canvas.width=window.innerWidth;canvas.height=window.innerHeight;const gl=canvas.getContext('webgl');if(!gl)return;// Interleave all blades and per-blade attributes, with per-blade randomized tip\nconst baseLeft=bladeConfig.baseLeft;const baseRight=bladeConfig.baseRight;const leftCtrl=bladeConfig.leftCtrl;const rightCtrl=bladeConfig.rightCtrl;const N=bladeConfig.curveResolution;const allVerts=[];const allBladeIndices=[];const allBladeHeights=[];const allBladeColors=[];const allBladeRandoms=[];let vertsPerBlade=0;for(let b=0;b<bladeCount;++b){// Random height and color per blade\nconst height=bladeConfig.heightMin+Math.random()*(bladeConfig.heightMax-bladeConfig.heightMin);const g=bladeConfig.colorGMin+Math.random()*(bladeConfig.colorGMax-bladeConfig.colorGMin);const r=bladeConfig.colorRMin+Math.random()*(bladeConfig.colorRMax-bladeConfig.colorRMin);const bCol=bladeConfig.colorBMin+Math.random()*(bladeConfig.colorBMax-bladeConfig.colorBMin);const bladeColor=[r,g,bCol];// Random value for blade sway (ensure unique per blade)\nconst bladeRandom=Math.random();// Randomize tip per blade\nlet tip=bladeConfig.tip;// If tip is an array and contains bladeRandom, evaluate it\nif(Array.isArray(tip)&&typeof tip[1]==='string'&&tip[1].includes('bladeRandom')){// Evaluate the y expression for tip\n// Example: [0.0, \"0.1*bladeRandom\"]\n// eslint-disable-next-line no-eval\ntip=[tip[0],eval(tip[1].replace(/bladeRandom/g,bladeRandom))];}else if(Array.isArray(tip)&&typeof tip[1]==='number'){tip=[tip[0],tip[1]];}// Build geometry for this blade\nconst leftEdge=[];const rightEdge=[];for(let i=0;i<=N;++i){const t=i/N;leftEdge.push(quadBezier(t,baseLeft,leftCtrl,tip));rightEdge.push(quadBezier(t,baseRight,rightCtrl,tip));}// Build interleaved triangle strip for one blade (for proper fill)\nconst bladeVerts=[];for(let i=0;i<=N;++i){bladeVerts.push(...leftEdge[i]);bladeVerts.push(...rightEdge[i]);}if(b===0)vertsPerBlade=bladeVerts.length/2;for(let i=0;i<vertsPerBlade;++i){allVerts.push(bladeVerts[i*2],bladeVerts[i*2+1]);allBladeIndices.push(b);allBladeHeights.push(height);allBladeColors.push(...bladeColor);allBladeRandoms.push(bladeRandom);}}const vertArray=new Float32Array(allVerts);const bladeIndexArray=new Float32Array(allBladeIndices);const bladeHeightArray=new Float32Array(allBladeHeights);const bladeColorArray=new Float32Array(allBladeColors);const bladeRandomArray=new Float32Array(allBladeRandoms);// Compile shaders and link program\nconst vertexShaderSource=`\nattribute vec2 position;\nattribute float bladeIndex;\nattribute float bladeHeight;\nattribute vec3 bladeColor;\nattribute float bladeRandom;\nuniform float time;\nuniform float bladeCount;\nuniform float spread;\nuniform float spreadOffset;\nuniform float phaseStep;\nuniform float swaySpeed;\nuniform float swayAmount;\nvarying vec3 vColor;\nvoid main() {\n    float xOffset = (bladeIndex / (bladeCount - 1.0)) * spread + spreadOffset;\n    float phase = bladeIndex * phaseStep;\n    float sway = ${bladeConfig.swayFormula};\n    float y = -1.0 + position.y * bladeHeight * 2.0;\n    gl_Position = vec4(position.x + xOffset + sway, y, 0.0, 1.0);\n    vColor = bladeColor;\n}\n`;const vs=createShader(gl,gl.VERTEX_SHADER,vertexShaderSource);const fs=createShader(gl,gl.FRAGMENT_SHADER,fragmentShaderSource);const program=gl.createProgram();gl.attachShader(program,vs);gl.attachShader(program,fs);gl.linkProgram(program);gl.useProgram(program);// Set up attributes\nconst posLoc=gl.getAttribLocation(program,'position');const bladeIdxLoc=gl.getAttribLocation(program,'bladeIndex');const bladeHeightLoc=gl.getAttribLocation(program,'bladeHeight');const bladeColorLoc=gl.getAttribLocation(program,'bladeColor');// Position\nconst buffer=gl.createBuffer();gl.bindBuffer(gl.ARRAY_BUFFER,buffer);gl.bufferData(gl.ARRAY_BUFFER,vertArray,gl.STATIC_DRAW);gl.enableVertexAttribArray(posLoc);gl.vertexAttribPointer(posLoc,2,gl.FLOAT,false,0,0);// Blade index\nconst bladeIdxBuffer=gl.createBuffer();gl.bindBuffer(gl.ARRAY_BUFFER,bladeIdxBuffer);gl.bufferData(gl.ARRAY_BUFFER,bladeIndexArray,gl.STATIC_DRAW);gl.enableVertexAttribArray(bladeIdxLoc);gl.vertexAttribPointer(bladeIdxLoc,1,gl.FLOAT,false,0,0);// Blade height\nconst bladeHeightBuffer=gl.createBuffer();gl.bindBuffer(gl.ARRAY_BUFFER,bladeHeightBuffer);gl.bufferData(gl.ARRAY_BUFFER,bladeHeightArray,gl.STATIC_DRAW);gl.enableVertexAttribArray(bladeHeightLoc);gl.vertexAttribPointer(bladeHeightLoc,1,gl.FLOAT,false,0,0);// Blade color\nconst bladeColorBuffer=gl.createBuffer();gl.bindBuffer(gl.ARRAY_BUFFER,bladeColorBuffer);gl.bufferData(gl.ARRAY_BUFFER,bladeColorArray,gl.STATIC_DRAW);gl.enableVertexAttribArray(bladeColorLoc);gl.vertexAttribPointer(bladeColorLoc,3,gl.FLOAT,false,0,0);// Blade random attribute setup (must be after all other attributes, and not overwritten)\nconst bladeRandLoc=gl.getAttribLocation(program,'bladeRandom');const bladeRandBuffer=gl.createBuffer();gl.bindBuffer(gl.ARRAY_BUFFER,bladeRandBuffer);gl.bufferData(gl.ARRAY_BUFFER,bladeRandomArray,gl.STATIC_DRAW);gl.enableVertexAttribArray(bladeRandLoc);gl.vertexAttribPointer(bladeRandLoc,1,gl.FLOAT,false,0,0);const timeLoc=gl.getUniformLocation(program,'time');const bladeCountLoc=gl.getUniformLocation(program,'bladeCount');const spreadLoc=gl.getUniformLocation(program,'spread');const spreadOffsetLoc=gl.getUniformLocation(program,'spreadOffset');const phaseStepLoc=gl.getUniformLocation(program,'phaseStep');const swaySpeedLoc=gl.getUniformLocation(program,'swaySpeed');const swayAmountLoc=gl.getUniformLocation(program,'swayAmount');function render(){gl.viewport(0,0,canvas.width,canvas.height);gl.clearColor(0.1,0.1,0.1,1);gl.clear(gl.COLOR_BUFFER_BIT);gl.useProgram(program);gl.uniform1f(timeLoc,performance.now()*0.001);gl.uniform1f(bladeCountLoc,bladeCount);gl.uniform1f(spreadLoc,bladeConfig.spread);gl.uniform1f(spreadOffsetLoc,bladeConfig.spreadOffset);gl.uniform1f(phaseStepLoc,bladeConfig.phaseStep);gl.uniform1f(swaySpeedLoc,bladeConfig.swaySpeed);gl.uniform1f(swayAmountLoc,bladeConfig.swayAmount);for(let b=0;b<bladeCount;++b){const offset=b*vertsPerBlade;gl.drawArrays(gl.TRIANGLE_STRIP,offset,vertsPerBlade);}requestAnimationFrame(render);}render();// Resize handler\nfunction handleResize(){canvas.width=window.innerWidth;canvas.height=window.innerHeight;}window.addEventListener('resize',handleResize);return()=>window.removeEventListener('resize',handleResize);},[bladeCount]);return/*#__PURE__*/_jsx(\"canvas\",{ref:canvasRef,style:{width:'100vw',height:'100vh',display:'block'}});};export default BladeGPUAnimated;","map":{"version":3,"names":["React","useRef","useEffect","bladeConfig","jsx","_jsx","quadBezier","t","p0","p1","p2","mt","getVertexShaderSource","swayFormula","fragmentShaderSource","createShader","gl","type","source","shader","shaderSource","compileShader","getShaderParameter","COMPILE_STATUS","Error","getShaderInfoLog","BladeGPUAnimated","_ref","bladeCount","canvasRef","canvas","current","width","window","innerWidth","height","innerHeight","getContext","baseLeft","baseRight","leftCtrl","rightCtrl","N","curveResolution","allVerts","allBladeIndices","allBladeHeights","allBladeColors","allBladeRandoms","vertsPerBlade","b","heightMin","Math","random","heightMax","g","colorGMin","colorGMax","r","colorRMin","colorRMax","bCol","colorBMin","colorBMax","bladeColor","bladeRandom","tip","Array","isArray","includes","eval","replace","leftEdge","rightEdge","i","push","bladeVerts","length","vertArray","Float32Array","bladeIndexArray","bladeHeightArray","bladeColorArray","bladeRandomArray","vertexShaderSource","vs","VERTEX_SHADER","fs","FRAGMENT_SHADER","program","createProgram","attachShader","linkProgram","useProgram","posLoc","getAttribLocation","bladeIdxLoc","bladeHeightLoc","bladeColorLoc","buffer","createBuffer","bindBuffer","ARRAY_BUFFER","bufferData","STATIC_DRAW","enableVertexAttribArray","vertexAttribPointer","FLOAT","bladeIdxBuffer","bladeHeightBuffer","bladeColorBuffer","bladeRandLoc","bladeRandBuffer","timeLoc","getUniformLocation","bladeCountLoc","spreadLoc","spreadOffsetLoc","phaseStepLoc","swaySpeedLoc","swayAmountLoc","render","viewport","clearColor","clear","COLOR_BUFFER_BIT","uniform1f","performance","now","spread","spreadOffset","phaseStep","swaySpeed","swayAmount","offset","drawArrays","TRIANGLE_STRIP","requestAnimationFrame","handleResize","addEventListener","removeEventListener","ref","style","display"],"sources":["/home/melvinvanelderen/TestGrass/client/src/components/BladeGPUAnimated.js"],"sourcesContent":["import React, { useRef, useEffect } from 'react';\nimport bladeConfig from '../bladeConfig.json';\n\n// Quadratic Bezier helper\nfunction quadBezier(t, p0, p1, p2) {\n    const mt = 1 - t;\n    return [\n        mt * mt * p0[0] + 2 * mt * t * p1[0] + t * t * p2[0],\n        mt * mt * p0[1] + 2 * mt * t * p1[1] + t * t * p2[1],\n    ];\n}\n\n// Helper to generate the vertex shader source with injected sway formula\nfunction getVertexShaderSource(swayFormula) {\n    return `\nattribute vec2 position;\nattribute float bladeIndex;\nattribute float bladeHeight;\nattribute vec3 bladeColor;\nuniform float time;\nuniform float bladeCount;\nuniform float spread;\nuniform float spreadOffset;\nuniform float phaseStep;\nuniform float swaySpeed;\nuniform float swayAmount;\nvarying vec3 vColor;\nvoid main() {\n    float xOffset = (bladeIndex / (bladeCount - 1.0)) * spread + spreadOffset;\n    float phase = bladeIndex * phaseStep;\n    float sway = ${swayFormula};\n    float y = position.y * bladeHeight;\n    gl_Position = vec4(position.x + xOffset + sway, y, 0.0, 1.0);\n    vColor = bladeColor;\n}\n`;\n}\n\nconst fragmentShaderSource = `\nprecision mediump float;\nvarying vec3 vColor;\nvoid main() {\n    gl_FragColor = vec4(vColor, 1.0);\n}\n`;\n\nfunction createShader(gl, type, source) {\n    const shader = gl.createShader(type);\n    gl.shaderSource(shader, source);\n    gl.compileShader(shader);\n    if (!gl.getShaderParameter(shader, gl.COMPILE_STATUS)) {\n        throw new Error(gl.getShaderInfoLog(shader));\n    }\n    return shader;\n}\n\nconst BladeGPUAnimated = ({ bladeCount = 5 }) => {\n    const canvasRef = useRef();\n\n    useEffect(() => {\n        const canvas = canvasRef.current;\n        canvas.width = window.innerWidth;\n        canvas.height = window.innerHeight;\n        const gl = canvas.getContext('webgl');\n        if (!gl) return;\n\n        // Interleave all blades and per-blade attributes, with per-blade randomized tip\n        const baseLeft = bladeConfig.baseLeft;\n        const baseRight = bladeConfig.baseRight;\n        const leftCtrl = bladeConfig.leftCtrl;\n        const rightCtrl = bladeConfig.rightCtrl;\n        const N = bladeConfig.curveResolution;\n        const allVerts = [];\n        const allBladeIndices = [];\n        const allBladeHeights = [];\n        const allBladeColors = [];\n        const allBladeRandoms = [];\n        let vertsPerBlade = 0;\n        for (let b = 0; b < bladeCount; ++b) {\n            // Random height and color per blade\n            const height = bladeConfig.heightMin + Math.random() * (bladeConfig.heightMax - bladeConfig.heightMin);\n            const g = bladeConfig.colorGMin + Math.random() * (bladeConfig.colorGMax - bladeConfig.colorGMin);\n            const r = bladeConfig.colorRMin + Math.random() * (bladeConfig.colorRMax - bladeConfig.colorRMin);\n            const bCol = bladeConfig.colorBMin + Math.random() * (bladeConfig.colorBMax - bladeConfig.colorBMin);\n            const bladeColor = [r, g, bCol];\n            // Random value for blade sway (ensure unique per blade)\n            const bladeRandom = Math.random();\n            // Randomize tip per blade\n            let tip = bladeConfig.tip;\n            // If tip is an array and contains bladeRandom, evaluate it\n            if (Array.isArray(tip) && typeof tip[1] === 'string' && tip[1].includes('bladeRandom')) {\n                // Evaluate the y expression for tip\n                // Example: [0.0, \"0.1*bladeRandom\"]\n                // eslint-disable-next-line no-eval\n                tip = [tip[0], eval(tip[1].replace(/bladeRandom/g, bladeRandom))];\n            } else if (Array.isArray(tip) && typeof tip[1] === 'number') {\n                tip = [tip[0], tip[1]];\n            }\n            // Build geometry for this blade\n            const leftEdge = [];\n            const rightEdge = [];\n            for (let i = 0; i <= N; ++i) {\n                const t = i / N;\n                leftEdge.push(quadBezier(t, baseLeft, leftCtrl, tip));\n                rightEdge.push(quadBezier(t, baseRight, rightCtrl, tip));\n            }\n            // Build interleaved triangle strip for one blade (for proper fill)\n            const bladeVerts = [];\n            for (let i = 0; i <= N; ++i) {\n                bladeVerts.push(...leftEdge[i]);\n                bladeVerts.push(...rightEdge[i]);\n            }\n            if (b === 0) vertsPerBlade = bladeVerts.length / 2;\n            for (let i = 0; i < vertsPerBlade; ++i) {\n                allVerts.push(bladeVerts[i * 2], bladeVerts[i * 2 + 1]);\n                allBladeIndices.push(b);\n                allBladeHeights.push(height);\n                allBladeColors.push(...bladeColor);\n                allBladeRandoms.push(bladeRandom);\n            }\n        }\n        const vertArray = new Float32Array(allVerts);\n        const bladeIndexArray = new Float32Array(allBladeIndices);\n        const bladeHeightArray = new Float32Array(allBladeHeights);\n        const bladeColorArray = new Float32Array(allBladeColors);\n        const bladeRandomArray = new Float32Array(allBladeRandoms);\n\n        // Compile shaders and link program\n        const vertexShaderSource = `\nattribute vec2 position;\nattribute float bladeIndex;\nattribute float bladeHeight;\nattribute vec3 bladeColor;\nattribute float bladeRandom;\nuniform float time;\nuniform float bladeCount;\nuniform float spread;\nuniform float spreadOffset;\nuniform float phaseStep;\nuniform float swaySpeed;\nuniform float swayAmount;\nvarying vec3 vColor;\nvoid main() {\n    float xOffset = (bladeIndex / (bladeCount - 1.0)) * spread + spreadOffset;\n    float phase = bladeIndex * phaseStep;\n    float sway = ${bladeConfig.swayFormula};\n    float y = -1.0 + position.y * bladeHeight * 2.0;\n    gl_Position = vec4(position.x + xOffset + sway, y, 0.0, 1.0);\n    vColor = bladeColor;\n}\n`;\n        const vs = createShader(gl, gl.VERTEX_SHADER, vertexShaderSource);\n        const fs = createShader(gl, gl.FRAGMENT_SHADER, fragmentShaderSource);\n        const program = gl.createProgram();\n        gl.attachShader(program, vs);\n        gl.attachShader(program, fs);\n        gl.linkProgram(program);\n        gl.useProgram(program);\n\n        // Set up attributes\n        const posLoc = gl.getAttribLocation(program, 'position');\n        const bladeIdxLoc = gl.getAttribLocation(program, 'bladeIndex');\n        const bladeHeightLoc = gl.getAttribLocation(program, 'bladeHeight');\n        const bladeColorLoc = gl.getAttribLocation(program, 'bladeColor');\n        // Position\n        const buffer = gl.createBuffer();\n        gl.bindBuffer(gl.ARRAY_BUFFER, buffer);\n        gl.bufferData(gl.ARRAY_BUFFER, vertArray, gl.STATIC_DRAW);\n        gl.enableVertexAttribArray(posLoc);\n        gl.vertexAttribPointer(posLoc, 2, gl.FLOAT, false, 0, 0);\n        // Blade index\n        const bladeIdxBuffer = gl.createBuffer();\n        gl.bindBuffer(gl.ARRAY_BUFFER, bladeIdxBuffer);\n        gl.bufferData(gl.ARRAY_BUFFER, bladeIndexArray, gl.STATIC_DRAW);\n        gl.enableVertexAttribArray(bladeIdxLoc);\n        gl.vertexAttribPointer(bladeIdxLoc, 1, gl.FLOAT, false, 0, 0);\n        // Blade height\n        const bladeHeightBuffer = gl.createBuffer();\n        gl.bindBuffer(gl.ARRAY_BUFFER, bladeHeightBuffer);\n        gl.bufferData(gl.ARRAY_BUFFER, bladeHeightArray, gl.STATIC_DRAW);\n        gl.enableVertexAttribArray(bladeHeightLoc);\n        gl.vertexAttribPointer(bladeHeightLoc, 1, gl.FLOAT, false, 0, 0);\n        // Blade color\n        const bladeColorBuffer = gl.createBuffer();\n        gl.bindBuffer(gl.ARRAY_BUFFER, bladeColorBuffer);\n        gl.bufferData(gl.ARRAY_BUFFER, bladeColorArray, gl.STATIC_DRAW);\n        gl.enableVertexAttribArray(bladeColorLoc);\n        gl.vertexAttribPointer(bladeColorLoc, 3, gl.FLOAT, false, 0, 0);\n        // Blade random attribute setup (must be after all other attributes, and not overwritten)\n        const bladeRandLoc = gl.getAttribLocation(program, 'bladeRandom');\n        const bladeRandBuffer = gl.createBuffer();\n        gl.bindBuffer(gl.ARRAY_BUFFER, bladeRandBuffer);\n        gl.bufferData(gl.ARRAY_BUFFER, bladeRandomArray, gl.STATIC_DRAW);\n        gl.enableVertexAttribArray(bladeRandLoc);\n        gl.vertexAttribPointer(bladeRandLoc, 1, gl.FLOAT, false, 0, 0);\n\n        const timeLoc = gl.getUniformLocation(program, 'time');\n        const bladeCountLoc = gl.getUniformLocation(program, 'bladeCount');\n        const spreadLoc = gl.getUniformLocation(program, 'spread');\n        const spreadOffsetLoc = gl.getUniformLocation(program, 'spreadOffset');\n        const phaseStepLoc = gl.getUniformLocation(program, 'phaseStep');\n        const swaySpeedLoc = gl.getUniformLocation(program, 'swaySpeed');\n        const swayAmountLoc = gl.getUniformLocation(program, 'swayAmount');\n\n        function render() {\n            gl.viewport(0, 0, canvas.width, canvas.height);\n            gl.clearColor(0.1, 0.1, 0.1, 1);\n            gl.clear(gl.COLOR_BUFFER_BIT);\n            gl.useProgram(program);\n            gl.uniform1f(timeLoc, performance.now() * 0.001);\n            gl.uniform1f(bladeCountLoc, bladeCount);\n            gl.uniform1f(spreadLoc, bladeConfig.spread);\n            gl.uniform1f(spreadOffsetLoc, bladeConfig.spreadOffset);\n            gl.uniform1f(phaseStepLoc, bladeConfig.phaseStep);\n            gl.uniform1f(swaySpeedLoc, bladeConfig.swaySpeed);\n            gl.uniform1f(swayAmountLoc, bladeConfig.swayAmount);\n            for (let b = 0; b < bladeCount; ++b) {\n                const offset = b * vertsPerBlade;\n                gl.drawArrays(gl.TRIANGLE_STRIP, offset, vertsPerBlade);\n            }\n            requestAnimationFrame(render);\n        }\n        render();\n\n        // Resize handler\n        function handleResize() {\n            canvas.width = window.innerWidth;\n            canvas.height = window.innerHeight;\n        }\n        window.addEventListener('resize', handleResize);\n        return () => window.removeEventListener('resize', handleResize);\n    }, [bladeCount]);\n\n    return <canvas ref={canvasRef} style={{ width: '100vw', height: '100vh', display: 'block' }} />;\n};\n\nexport default BladeGPUAnimated;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}